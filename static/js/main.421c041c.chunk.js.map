{"version":3,"sources":["components/Mines.js","App.js","reportWebVitals.js","index.js"],"names":["Mines","useState","arr","setArr","lose","setLose","win","setWin","difficulty","setDifficulty","heading","setHeading","mineCount","setMineCount","newGame","maxRandomInt","min","max","mines","field","i","row","j","push","x","y","randomNum","Math","floor","random","revealed","tergeted","isMine","numberOfMinesAroundIt","length","counter","q","Number","w","checkSurrounds","newArr","checkIfWin","isWon","forEach","className","map","onContextMenu","e","preventDefault","slice","targeted","targetMine","onClick","clickBox","id","cascadeHandler","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.421c041c.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction Mines() {\r\n   // States here\r\n\r\n   const [arr, setArr] = useState([]);\r\n   const [lose, setLose] = useState(false);\r\n   const [win, setWin] = useState(false);\r\n   const [difficulty, setDifficulty] = useState(\"\");\r\n   const [heading, setHeading] = useState(\":) CHOOSE A DIFFICULTY LEVEL TO START :)\");\r\n   const [mineCount, setMineCount] = useState(0);\r\n\r\n   // States here\r\n\r\n   function randomInteger(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1)) + min;\r\n   }\r\n\r\n   function newGame(maxRandomInt, difficulty) {\r\n      let mines = 0;\r\n      let field = [];\r\n      for (let i = 0; i < 9; i++) {\r\n         let row = [];\r\n         for (let j = 0; j < 20; j++) {\r\n            row.push({\r\n               x: i,\r\n               y: j,\r\n               randomNum: randomInteger(0, maxRandomInt),\r\n               revealed: false,\r\n               tergeted: false,\r\n               isMine: false,\r\n               numberOfMinesAroundIt: 0,\r\n            });\r\n         }\r\n         field.push(row);\r\n      }\r\n\r\n      for (let i = 0; i < field.length; i++) {\r\n         for (let j = 0; j < field[i].length; j++) {\r\n            if (field[i][j].randomNum === 0) mines++;\r\n            let counter = 0;\r\n            for (let q = Math.max(0, i - 1); q <= Math.min(field.length - 1, Number(i) + 1); q++) {\r\n               for (let w = Math.max(0, j - 1); w <= Math.min(field[0].length - 1, Number(j) + 1); w++) {\r\n                  if (field[q][w].randomNum === 0) counter++;\r\n               }\r\n            }\r\n            field[i][j].numberOfMinesAroundIt = counter;\r\n         }\r\n      }\r\n\r\n      setMineCount(mines);\r\n      setDifficulty(difficulty);\r\n      setArr(field);\r\n      setLose(false);\r\n      setWin(false);\r\n      setHeading(\":) YO IN THE MINES NOW! GOOD LUCK FELLA :)\");\r\n   }\r\n\r\n   function clickBox(x, y) {\r\n      let newArr = arr.slice(0);\r\n      if (arr[x][y].randomNum === 0) {\r\n         newArr[x][y].isMine = true;\r\n         newArr[x][y].revealed = true;\r\n         setLose(true);\r\n         setHeading(\":( BOOM! SORRY, YALL BLOWN UP BADLY :(\");\r\n      } else {\r\n         newArr[x][y].revealed = true;\r\n      }\r\n      if (arr[x][y].numberOfMinesAroundIt === 0) {\r\n         checkSurrounds(newArr, x, y);\r\n      }\r\n      setArr(newArr);\r\n      checkIfWin();\r\n   }\r\n\r\n   function targetMine(e, x, y) {\r\n      e.preventDefault();\r\n      if (win || lose || arr[x][y].revealed) return;\r\n      let newArr = arr.slice(0);\r\n      if (newArr[x][y].targeted) {\r\n         setMineCount(mineCount + 1);\r\n         newArr[x][y].targeted = false;\r\n      } else {\r\n         setMineCount(mineCount - 1);\r\n         newArr[x][y].targeted = true;\r\n      }\r\n\r\n      setArr(newArr);\r\n   }\r\n\r\n   function cascadeHandler(x, y) {\r\n      if (win || lose) return;\r\n      let newArr = arr.slice(0);\r\n      for (let i = Math.max(0, x - 1); i <= Math.min(newArr.length - 1, x + 1); i++) {\r\n         for (let j = Math.max(0, y - 1); j <= Math.min(newArr[0].length - 1, y + 1); j++) {\r\n            if (!newArr[i][j].revealed) {\r\n               if (newArr[i][j].randomNum === 0 && !newArr[i][j].targeted) {\r\n                  newArr[i][j].isMine = true;\r\n                  newArr[i][j].revealed = true;\r\n                  setLose(true);\r\n                  setHeading(\":( BOOM! SORRY, YALL BLOWN UP BADLY :(\");\r\n               } else if (newArr[i][j].randomNum !== 0 && !newArr[i][j].targeted) {\r\n                  newArr[i][j].revealed = true;\r\n               }\r\n               if (newArr[i][j].numberOfMinesAroundIt === 0) {\r\n                  checkSurrounds(newArr, i, j);\r\n               }\r\n            }\r\n         }\r\n      }\r\n      setArr(newArr);\r\n      checkIfWin();\r\n   }\r\n\r\n   /* \r\n      That damn recursion took me a while to figure out...\r\n      Proud of myself!\r\n   */\r\n\r\n   function checkSurrounds(newArr, x, y) {\r\n      if (newArr[x][y].numberOfMinesAroundIt !== 0) return;\r\n      for (let i = Math.max(0, x - 1); i <= Math.min(arr.length - 1, x + 1); i++) {\r\n         for (let j = Math.max(0, y - 1); j <= Math.min(arr[0].length - 1, y + 1); j++) {\r\n            if (!newArr[i][j].revealed) {\r\n               newArr[i][j].revealed = true;\r\n               checkSurrounds(newArr, i, j);\r\n            }\r\n         }\r\n      }\r\n   }\r\n\r\n   /* \r\n      Yep :) :) :)\r\n      Still proud!\r\n   */\r\n\r\n   function checkIfWin() {\r\n      let isWon = true;\r\n      arr.forEach((x) => {\r\n         x.forEach((y) => {\r\n            if (y.randomNum !== 0 && y.revealed === false) {\r\n               isWon = false;\r\n            }\r\n         });\r\n      });\r\n      if (isWon) {\r\n         setWin(true);\r\n         setHeading(\":D CONGRATS! THERE`S NO BLOWIN YA! :D\");\r\n      }\r\n   }\r\n\r\n   function revealMines() {\r\n      for (let i = 0; i < arr.length; i++) {\r\n         for (let j = 0; j < arr[i].length; j++) {\r\n            if (arr[i][j].randomNum === 0) {\r\n               let newArr = arr.slice(0);\r\n               newArr[i][j].isMine = true;\r\n               setArr(newArr);\r\n            }\r\n         }\r\n      }\r\n      setLose(true);\r\n      setHeading(\":( BOOM! SORRY, YALL BLOWN UP BADLY :(\");\r\n   }\r\n\r\n   return (\r\n      <main className=\"wrapper\">\r\n         <h1>MINESWEEPER! ...just a bit uglier...</h1>\r\n\r\n         <h2 className={`${lose ? \"game-over\" : \"\"}${win ? \"game-win\" : \"\"}`}>{heading}</h2>\r\n         {difficulty ? (\r\n            <h1>\r\n               {difficulty} {!win ? `- ${mineCount} mines left on the field` : \"\"}{\" \"}\r\n            </h1>\r\n         ) : (\r\n            \"\"\r\n         )}\r\n\r\n         <div className={`${!lose ? \"\" : \"game-over-field\"}${!win ? \"\" : \"game-win-field\"}`}>\r\n            {arr.map((x, i) => {\r\n               return (\r\n                  <div key={i} className=\"row\">\r\n                     {x.map((y, j) => {\r\n                        return (\r\n                           <p\r\n                              key={`${i}${j}`}\r\n                              onContextMenu={(e) => targetMine(e, y.x, y.y)}\r\n                              onClick={!arr[i][j].revealed && !lose && !win ? () => clickBox(y.x, y.y) : () => {}}\r\n                              className={`box ${arr[i][j].targeted ? \"target-mine\" : \"\"}    \r\n                              ${arr[i][j].revealed && !arr[i][j].isMine ? \"revealed\" : \"\"}`}\r\n                              id={`${arr[i][j].isMine ? \"mine\" : \"\"}`}\r\n                           >\r\n                              {y.revealed && y.numberOfMinesAroundIt !== 0 && y.randomNum !== 0 ? y.numberOfMinesAroundIt : \" \"}\r\n                              {y.revealed && y.numberOfMinesAroundIt !== 0 && !y.isMine && y.randomNum !== 0 ? (\r\n                                 <span onClick={() => cascadeHandler(y.x, y.y)} id=\"cascade\">\r\n                                    cascade\r\n                                 </span>\r\n                              ) : (\r\n                                 \" \"\r\n                              )}\r\n                           </p>\r\n                        );\r\n                     })}\r\n                  </div>\r\n               );\r\n            })}\r\n         </div>\r\n         <div>\r\n            {difficulty ? <p>click on any diffuculty to start new game.</p> : \"\"}\r\n            <button className={`${!lose ? \"\" : \"game-over-field\"}${!win ? \"\" : \"game-win-field\"}`} onClick={() => newGame(12, \"Grasp the idea\")}>\r\n               Grasp the idea\r\n            </button>\r\n            <button className={`${!lose ? \"\" : \"game-over-field\"}${!win ? \"\" : \"game-win-field\"}`} onClick={() => newGame(9, \"Easy\")}>\r\n               Easy\r\n            </button>\r\n            <button className={`${!lose ? \"\" : \"game-over-field\"}${!win ? \"\" : \"game-win-field\"}`} onClick={() => newGame(7, \"Medium\")}>\r\n               Medium\r\n            </button>\r\n            <button className={`${!lose ? \"\" : \"game-over-field\"}${!win ? \"\" : \"game-win-field\"}`} onClick={() => newGame(5, \"Hard\")}>\r\n               Hard\r\n            </button>\r\n            <button className={`${!lose ? \"\" : \"game-over-field\"}${!win ? \"\" : \"game-win-field\"}`} onClick={() => newGame(3, \"Expert\")}>\r\n               Expert\r\n            </button>\r\n         </div>\r\n\r\n         {difficulty && !win ? <button onClick={!win ? revealMines : () => {}}>Show all the mines</button> : \"\"}\r\n\r\n         <section className=\"rules\">\r\n            <ul>\r\n               <li>LEFT CLICK - to clear a square that you think is not a mine.</li>\r\n               <li>RIGHT CLICK - to mark and unmark a square with orange to indicate you think a mine is there.</li>\r\n               <li>\r\n                  CASCADE (immitates clicking both mouse buttons at the same time in the actual game) - when the computer automatically opens up\r\n                  surrounding squares for you. Carefull for if you didn't mark the mines right, you lose.\r\n               </li>\r\n            </ul>\r\n         </section>\r\n      </main>\r\n   );\r\n}\r\n\r\nexport default Mines;\r\n","import \"./App.css\";\nimport Mines from \"./components/Mines\";\n\nfunction App() {\n   return (\n   \n         <Mines />\n   \n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}